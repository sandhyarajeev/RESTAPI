package com.altimetrik.serviceimpl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.altimetrik.dto.EmployeeDTO;
import com.altimetrik.model.Department;
import com.altimetrik.model.Employee;
import com.altimetrik.repository.DepartmentRepo;
import com.altimetrik.repository.EmpDeptProjectRepo;
import com.altimetrik.repository.EmployeeRepo;
import com.altimetrik.repository.ProjectDeptRepo;
import com.altimetrik.service.CompanyService;

@Service
public class CompanyServiceImpl implements CompanyService {
	
	@Autowired
	ProjectDeptRepo prjtDeptRepo;
	
	@Autowired
	DepartmentRepo deptRepo;
	
	@Autowired
	EmployeeRepo empRepo;
	
	
	@Autowired
	EmpDeptProjectRepo empDeptProjectRepo;
	
	@Autowired
	ModelMapper modelMapper;

//	@Override
//	public ResponseEntity<List<Employee>> getEmployeesInProject(String prjtId, String deptId) {
//		System.out.println("CompanyServiceImpl.getEmployeesInProject() "+prjtId+" "+deptId);
//		Optional<Department> opt = Optional.of(deptRepo.findByDeptId(deptId));
//		System.out.println("CompanyServiceImpl.getEmployeesInProject()"+opt.isPresent());
//		Department dept = null;
//		if(opt.isPresent())
//			dept = opt.get();
//		ProjectDept prjtDept = prjtDeptRepo.getPrjtDept(prjtId, dept);
//		List<Employee> empList= empDeptProjectRepo.findEmployees(prjtDept);
//		ResponseEntity<List<Employee>> response = new ResponseEntity<List<Employee>>(empList, HttpStatus.FOUND);
//		return response;
//	}
	
	@Override
	public ResponseEntity<List<EmployeeDTO>> getEmployeesInProject(String prjtId, String deptId) {
		System.out.println("CompanyServiceImpl.getEmployeesInProject() "+prjtId+" "+deptId);
		Department dept = deptRepo.findByDeptId(deptId);
		List<Employee>empList = empRepo.getEmployeesInProject( prjtId,  dept); 
		ResponseEntity<List<Employee>> response = null;
		List<EmployeeDTO> empDtoList = null ;
		HttpStatus status;
		if(!empList.isEmpty()) {
			empDtoList = empList.stream().map(this::convert).collect(Collectors.toList());
			status = HttpStatus.OK;
		}else {
					
			status = HttpStatus.NO_CONTENT;
		}
		return new ResponseEntity<List<EmployeeDTO>>(empDtoList, status);
	}

	@Override
	public ResponseEntity<List<EmployeeDTO>> getEmployeesInDept(String deptId) {
		List<Employee> empList = empRepo.getEmployeesInDept(deptId);
		ResponseEntity<List<EmployeeDTO>> response;
		List<EmployeeDTO> empDtoList = null ;
		HttpStatus status;
		if(!empList.isEmpty()) {
			empDtoList = empList.stream().map(this::convert).collect(Collectors.toList());
			status = HttpStatus.OK;
		}else {
					
			status = HttpStatus.NO_CONTENT;
		}
		return new ResponseEntity<List<EmployeeDTO>>(empDtoList, status);
	}

	private EmployeeDTO convert(Employee emp) {
		EmployeeDTO empDto = modelMapper.map(emp, EmployeeDTO.class);
		return empDto;
	}

	@Override
	public ResponseEntity<Void> deleteEmpFrmPrjt(String prjtId, String empId,String deptId) {
		Department dept = deptRepo.findByDeptId(deptId);
		empDeptProjectRepo.deleteEmpFrmPrjt(prjtId,empId);
		return null;
	}


}
